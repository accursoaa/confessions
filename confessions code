mcgill-confessions/
├── src/
│   ├── main/
│   │   ├── java/com/example/mcgillconfessions/
│   │   │   ├── McgillConfessionsApplication.java  # Main application file
│   │   │   ├── ConfessionController.java          # RestController for handling API endpoints
│   │   │   ├── ConfessionService.java             # Service for managing business logic
│   │   │   ├── Confession.java                    # Confession model
│   │   │   ├── Comment.java                       # Comment model
│   │   │   ├── Report.java                        # Report model
│   └── resources/
│       ├── application.properties                 # Application configuration
├── pom.xml                                         # Maven configuration file
# Server configuration
server.port=8080

# Database configuration (using H2 in-memory database for simplicity)
spring.datasource.url=jdbc:h2:mem:mcgillconfessionsdb;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.h2.console.enabled=true

# JPA / Hibernate settings
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/mcgillconfessions
spring.datasource.username=your-username
spring.datasource.password=your-password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>mcgill-confessions</artifactId>
    <version>1.0.0</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.2</version>
        <relativePath/>
    </parent>

    <dependencies>
        <!-- Spring Boot dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <!-- Database driver -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        
        <!-- For PostgreSQL (if needed) -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok for simplified model code -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Socket.io or WebSocket support -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.web.util.HtmlUtils;

@RestController
@RequestMapping("/api")
public class ConfessionController {

    // WebSocket endpoint for real-time confession broadcast
    @MessageMapping("/newConfession")
    @SendTo("/topic/confessions")
    public Confession confess(Confession confession) {
        confession.setText(HtmlUtils.htmlEscape(confession.getText()));  // Escape HTML input for security
        return confession;
    }

    // WebSocket endpoint for real-time comment broadcast
    @MessageMapping("/newComment")
    @SendTo("/topic/comments")
    public Comment comment(Comment comment) {
        comment.setText(HtmlUtils.htmlEscape(comment.getText()));  // Escape HTML input for security
        return comment;
    }
}
import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic");
        config.setApplicationDestinationPrefixes("/app");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/websocket-confession").withSockJS();
    }
}
